遵守五大原则可以提高代码可读性，可拓展性，可维护性

依赖倒置原则
    高/上层模块不依赖于底/下层模块，两者都应该依赖于抽象，而不依赖具体实现
    controller依赖service的接口，service实现类依赖service接口

单一职责原则
    一个类/模块只负责一个职责
    设计类时要求类功能单一，颗粒度小
    要根据当前业务分析类的职责是否单一，拆分一个类要适当
    对于简单的业务背景，没必要过度拆分，不利于后期维护开发

开闭原则
    对扩展开放，对修改关闭
    在不修改已有的代码条件下，通过新增模块、类、方法来完成新功能
    好处：原有代码依旧可用(测试过的)，无需修改调用原代码的地方，只需测试新增代码即可
    例子：AOP(面向切面编程)，就是基于开闭原则，在不改变原有核心业务代码的基础上，拓展日志，权限处理等新功能

接口隔离原则
    实现接口时，不应该被迫实现自己不需要的功能
    设计接口时，要设计小而精的接口，不要设计包含所有方法的大接口

里氏替换原则
    子类对象必须能无缝替换父类对象，并保证原有逻辑正确且不会被破坏
    子类重写父类方法时，可以改变父类内部的实现逻辑，但不能改变最后的功能效果，
    如ArrayList用数组实现线性表，LinkedList用链表实现线性表
    重写父类时，要求
        子类方法访问权限 >= 父类方法访问权限
        子类方法返回类型 是 父类方法返回类型/其子类
        子类抛出的异常 是 父类方法抛出的异常/其子类

合成复用原则：优先使用组合(将类对象作为自己的成员变量)而不是继承来复用代码
迪米特法则：减少对象直接的耦合度(通过接口、通过中间层来解耦)