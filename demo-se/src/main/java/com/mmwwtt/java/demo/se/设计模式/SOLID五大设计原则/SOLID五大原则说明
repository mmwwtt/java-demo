遵守五大原则可以提高代码可读性，可拓展性，可维护性

依赖倒置原则
    高层模块不依赖于底层模块，两者都应该依赖于具体
    调用过程中，调用者属于高层模块，被调用者属于底层模块

单一职责原则
    一个类/模块只负责一个职责
    设计类时要求类功能的那一，颗粒度小
    要根据当前业务背景分析类的职责是否单一，拆分一个类要适当
    对于简单的业务背景，没必要过度拆分，不利于后期维护开发

开闭原则
    对扩展开放，对修改关闭
    要在不修改已有的代码条件下，通过新增模块，类，方法来完成新的功能点

    好处：
        原有代码依旧可用(原有代码是经过测试了的)，调用原代码的地方无需做出任何改变
        不会对原有代码造成影响
        只需测试新增代码即可
    例子：AOP(面向切面编程)，就是基于开闭原则，在不改变原有核心业务代码的基础上，拓展日志，权限处理等新功能

接口隔离原则
    调用方调用接口时，不应该被迫去实现自己不需要的功能
    设计接口时，要设计小而精的接口，不要去设计一个包含一切行为的大接口

里氏替换原则
    子类能够替换父类出现在的任何位置，并保证原有逻辑正确且不会被破坏
    子类重写父类方法时，可以改变父类内部的实现逻辑，到那时不能改变最后的功能效果，
    如ArrayList用数组实现线性表，LinkedList用链表实现线性表
    重写父类时，要求
        子类方法访问权限 >= 父类方法访问权限
        子类方法返回类型 是 父类方法返回类型/其子类
        子类抛出的异常 是 父类方法抛出的异常/其子类

