

1.介绍一下链表，栈，队列，树，图的相关知识。
链表是一种物理存储上非连续，数据元素的逻辑顺序通过链表中的指针链接次序，实现的一种线性存储结构。

链表由一系列节点（链表中每一个元素称为节点）组成，节点在运行时动态生成 （malloc），每个节点包括两个部分：

    一个是存储数据元素的数据域 ，另一个是存储下一个节点地址的指针域。

堆是一种是一种特殊的树状结构，其中每个节点都有一个键值，并且满足一定的堆属性。堆常常用于实现优先级队列和排序算法。

在堆中，每个节点的键值必须满足堆属性。具体来说，对于最大堆（大顶堆），每个节点的键值都大于或等于其子节点的键值；而对于最小堆（小顶堆），每个节点的键值都小于或等于其子节点的键值。这个属性使得堆的根节点始终是最大（或最小）的元素。

堆通常使用数组来表示，其中每个元素在数组中的位置与其在树中的位置相关联。为了满足堆属性，通常使用下标从1开始的完全二叉树来表示堆，这样可以通过简单的计算获得节点的父节点和子节点。

堆的常见操作包括：

插入：将一个新元素插入到堆中的适当位置，并调整堆以保持堆属性。
删除根节点：移除堆中的根节点，并调整堆以保持堆属性。
查找根节点：获取堆中的根节点，它是堆中的最大（或最小）元素。
堆化（Heapify）：将一个无序数组转换为堆的过程，通常用于构建堆或恢复堆属性。
堆的一个重要应用是实现优先级队列。优先级队列是一种数据结构，其中每个元素都有一个相关的优先级或权重。通过使用堆，可以在常数时间复杂度内获取具有最高（或最低）优先级的元素，而无需对整个队列进行排序。

此外，堆还可以用于各种排序算法，例如堆排序（Heap Sort）。堆排序利用堆的性质，首先构建一个最大堆（或最小堆），然后反复删除根节点并重新调整堆，最终得到一个有序的数组。

总结：堆是一种树状数据结构，具有堆属性，用于高效地管理和组织数据。它常用于实现优先级队列和排序算法，具有快速获取最大（或最小）元素的特点。

栈和队列是两种重要的线性结构。从数据结构角度看，栈和队列也是线性表， 其特殊性在于栈和队列的基本操作是线性表操作的子集，它们是操作受限的线性表，因此，可称为限定性的数据结构。

栈是限定仅在表尾进行插入或删除操作的线性表。 表尾称为栈顶,表头端称为栈底 。不含元素的空表称为空栈。栈的修改是按后进先出的原则进行的。

和栈相反，队列是一种先进先出的线性表。它只允许在表的一端进行插入，而在另一端删除元素，允许插入的一端称为队尾，允许删除的一端则称为队头。

图由节点（也称为顶点）和连接节点的边组成。图可以用于表示各种实际问题，如社交网络、网络拓扑、路线规划等。

根据图的特性，可以将其分类为以下两种常见类型：

无向图：图中的边没有方向。如果两个节点之间存在一条边，则可以沿着该边在两个节点之间进行双向遍历。
有向图：图中的边有方向。如果存在一条从节点 A 到节点 B 的有向边，那么可以从节点 A 沿着该边到达节点 B，但不能反过来。
常见的图遍历算法包括深度优先搜索（DFS）和广度优先搜索（BFS）。

深度优先搜索（DFS）： 深度优先搜索从图中的一个节点开始，沿着一条路径尽可能深地访问图的节点，直到到达末端节点，然后回溯到上一个节点，继续访问未被探索的分支。这个过程以递归或栈的方式实现。
DFS的步骤：

选择一个起始节点，并标记为已访问。
访问该节点，并标记为已访问。
递归或使用栈，按照深度优先的原则，访问与当前节点相邻且未被访问的节点。
重复上述步骤，直到所有节点都被访问。
DFS适用于以下情况：

查找路径或连通性：通过遍历可以找到两个节点之间是否存在路径，或者找到图中的连通分量。
拓扑排序：对有向无环图进行拓扑排序，确定节点之间的依赖关系顺序。
广度优先搜索（BFS）： 广度优先搜索从图中的一个节点开始，首先访问该节点，然后依次访问其所有相邻节点，再访问相邻节点的相邻节点，以此类推，直到遍历完所有节点。这个过程使用队列实现。
BFS的步骤：

选择一个起始节点，并标记为已访问。
将起始节点放入队列中。
从队列中取出一个节点，访问该节点，并将其未访问过的相邻节点放入队列中。
重复上述步骤，直到队列为空。
BFS适用于以下情况：

最短路径和最少步骤：BFS可以找到起始节点到目标节点的最短路径，或者在图中找到从起始节点到目标节点的最少步骤。
层级遍历：可以按照层级的方式遍历图，对于具有层次结构的问题很有用，如树的层级遍历。
无论是DFS还是BFS，都需要标记节点是否已经访问过，以避免重复访问，尤其在图中存在环的情况下。这可以通过设置访问标记数组或属性来实现。

总结：图的遍历是按照一定规则访问图中的所有节点和边的过程。深度优先搜索（DFS）按照深度优先的原则遍历图，而广度优先搜索（BFS）按照广度优先的原则遍历图。DFS适用于路径查找和拓扑排序，而BFS适用于最短路径和层级遍历。

树形结构是一类重要的非线性数据结构，树中结点之间具有明确的层次关系，并且结点之间有分支，非常类似于真正的树。树形结构在客观世界中大量存在，如行政组织机构和人类社会家谱等都可以用树形结构形象表示。

(1)结点的度：结点所拥有的子树的个数。

(2)树的度：树中结点度的最大值。

(3)叶子：度为0的结点

(4)分支结点：度不为0的结点。除根结点之外的分支结点统称为内部结点。根结点又称为开始结点

(5)孩子：结点的直接后继（结点的子树的根）

(6)双亲：结点直接前趋

(7)兄弟：同一双亲的孩子互为兄弟

(8)子孙：一颗树上的任何结点称为根的子孙

(9)祖先：从根结点开始到该及诶点连线上的所有结点都是该结点的祖先

(10)路径：树中存在一个结点序列k1，k2…ki，使得ki是ki+1的双亲（1《i<j）,则称该及诶点序列是从k1到kj的一条路径或道路即链接两个结点的线段的数目等于j-1;

注意：

若一个结点序列是路径，则在树的树形图表示中，该结点序列’自上而下‘地通过路径上的每条边。

(11)结点的层：设跟结点的层数为1，其余结点的层数等于双亲结点的层数加1。

(12)输的高度（或深度）：树中所有结点层数的最大值。

(13)有序树和无序树：将树中每个结点的各子树看成是从左到右有次序的（即不能互换），则称该树为有序树；否则称为无序树。

(14)森林：是m(m>=0)棵互不相交的树的集合。树和森林的概念相近，删去一棵树的根，就得到一个森林；反之加上一个节点做为根，森林变成一棵树。

性质一： 非空树中的结点总数等于树中所有结点的度之和加1.

性质二：度为k的非空树的第i层最多有k的（i-1）次方个结点（i>=1）；

性质三：深度为h的k叉树最多有k^h - 1/k-1个结点。

2.MySQL中如何提高多表查询的效率？
索引优化：为联查中使用的关联字段创建合适的索引。确保每个表的关联字段都有索引，这样MySQL可以更快地定位到匹配的行。考虑创建组合索引以覆盖多个关联字段，避免使用过多或不必要的索引，因为索引的维护也需要额外的开销。

索引的优点：可以大大的加快数据的检索速度。在查询的过程中，使用优化隐藏器，提高系统性能。

缺点：时间：创建维护索引要耗费时间。空间：索引需要占物理空间

避免使用子查询，使用缓存。

3.如何防止库存超卖？
乐观锁，悲观锁，版本号，CAS。

在程序世界中，乐观锁和悲观锁的最终目的都是为了保证线程安全，避免在并发场景下的资源竞争问题。但是，相比于乐观锁，悲观锁对性能的影响更大！

悲观锁总是假设最坏的情况，认为共享资源每次被访问的时候就会出现问题(比如共享数据被修改)，所以每次在获取资源操作的时候都会上锁，这样其他线程想拿到这个资源就会阻塞直到锁被上一个持有者释放。也就是说，共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程。

 Java 中synchronized和ReentrantLock等独占锁就是悲观锁思想的实现。

高并发的场景下，激烈的锁竞争会造成线程阻塞，大量阻塞线程会导致系统的上下文切换，增加系统的性能开销。并且，悲观锁还可能会存在死锁问题，影响代码的正常运行。

乐观锁总是假设最好的情况，认为共享资源每次被访问的时候不会出现问题，线程可以不停地执行，无需加锁也无需等待，只是在提交修改的时候去验证对应的资源（也就是数据）是否被其它线程修改了（具体方法可以使用版本号机制或 CAS 算法）。高并发的场景下，乐观锁相比悲观锁来说，不存在锁竞争造成线程阻塞，也不会有死锁的问题，在性能上往往会更胜一筹。但是，如果冲突频繁发生（写占比非常多的情况），会频繁失败和重试（悲观锁的开销是固定的），这样同样会非常影响性能，导致 CPU 飙升。

乐观锁一般会使用版本号机制或 CAS 算法实现，CAS 算法相对来说更多一些，这里需要格外注意。

版本号机制

一般是在数据表中加上一个数据版本号 version 字段，表示数据被修改的次数。当数据被修改时，version 值会加一。当线程 A 要更新数据值时，在读取数据的同时也会读取 version 值，在提交更新时，若刚才读取到的 version 值为当前数据库中的 version 值相等时才更新，否则重试更新操作，直到更新成功。

举一个简单的例子 ：假设数据库中帐户信息表中有一个 version 字段，当前值为 1 ；而当前帐户余额字段（ balance ）为 $100 。

操作员 A 此时将其读出（ version=1 ），并从其帐户余额中扣除 $50（ $100-$50 ）。

在操作员 A 操作的过程中，操作员 B 也读入此用户信息（ version=1 ），并从其帐户余额中扣除 $20 （ $100-$20 ）。

操作员 A 完成了修改工作，将数据版本号（ version=1 ），连同帐户扣除后余额（ balance=$50 ），提交至数据库更新，此时由于提交数据版本等于数据库记录当前版本，数据被更新，数据库记录 version 更新为 2 。

操作员 B 完成了操作，也将版本号（ version=1 ）试图向数据库提交数据（ balance=$80 ），但此时比对数据库记录版本时发现，操作员 B 提交的数据版本号为 1 ，数据库记录当前版本也为 2 ，不满足 “ 提交版本必须等于当前版本才能执行更新 “ 的乐观锁策略，因此，操作员 B 的提交被驳回。

这样就避免了操作员 B 用基于 version=1 的旧数据修改的结果覆盖操作员 A 的操作结果的可能。

CAS 算法

CAS 的全称是 Compare And Swap（比较与交换） ，用于实现乐观锁，被广泛应用于各大框架中。CAS 的思想很简单，就是用一个预期值和要更新的变量值进行比较，两值相等才会进行更新。

CAS 是一个原子操作，底层依赖于一条 CPU 的原子指令。

原子操作 即最小不可拆分的操作，也就是说操作一旦开始，就不能被打断，直到操作完成。

CAS 涉及到三个操作数：

V ：要更新的变量值(Var)

E ：预期值(Expected)

N ：拟写入的新值(New)

当且仅当 V 的值等于 E 时，CAS 通过原子方式用新值 N 来更新 V 的值。如果不等，说明已经有其它线程更新了 V，则当前线程放弃更新。

举一个简单的例子 ：线程 A 要修改变量 i 的值为 6，i 原值为 1（V = 1，E=1，N=6，假设不存在 ABA 问题）。

i 与 1 进行比较，如果相等， 则说明没被其他线程修改，可以被设置为 6 。

i 与 1 进行比较，如果不相等，则说明被其他线程修改，当前线程放弃更新，CAS 操作失败。

当多个线程同时使用 CAS 操作一个变量时，只有一个会胜出，并成功更新，其余均会失败，但失败的线程并不会被挂起，仅是被告知失败，并且允许再次尝试，当然也允许失败的线程放弃操作。

4.如何提高系统并发性能？
使用线程池：合理使用线程池可以有效管理线程的创建和销毁，减少线程创建的开销。通过线程池可以重用线程，并控制线程的数量，避免过多的线程竞争资源导致性能下降。

减少锁竞争：使用细粒度的锁和锁分离技术可以减少线程之间的竞争，提高并发性能。考虑使用读写锁（ReentrantReadWriteLock）或无锁的并发数据结构（如ConcurrentHashMap）来替代全局锁，以实现更好的并发性能。

并发数据结构：选择适当的并发数据结构可以提高并发性能。Java中提供了许多并发安全的数据结构，如ConcurrentHashMap、ConcurrentLinkedQueue等。使用这些数据结构可以避免手动处理同步和锁带来的开销。

合理的任务拆分：将大任务拆分为多个小任务，并行处理可以提高并发性能。可以使用Java并发框架（如Executor框架）或并发工具类（如CountDownLatch、CyclicBarrier等）来实现任务的拆分和并发执行。

使用非阻塞IO：在处理高并发的网络请求时，可以考虑使用非阻塞IO（NIO）来提高系统的并发性能。NIO利用事件驱动模型和选择器（Selector）机制，可以较少线程数目，提高处理并发请求的能力。

缓存优化：合理使用缓存可以减少对底层资源的访问，提高系统的响应速度和并发性能。可以使用内存缓存（如Redis、Memcached）或者本地缓存（如Caffeine、Ehcache）来存储频繁访问的数据，避免重复计算或查询数据库。

并行算法和数据结构：选择适当的并行算法和数据结构可以充分利用多核处理器的能力，提高系统的并发性能。例如，使用并行排序算法（如Fork/Join框架）或并行集合（如并行流Stream）来处理大规模数据。

JVM调优：通过调整JVM参数可以提高系统的并发性能。例如，调整堆内存大小、垃圾回收策略和线程栈大小等参数，以适应系统的并发负载。

分布式部署：如果系统需要处理非常高的并发请求，可以考虑将系统部署为分布式架构，通过横向扩展来提高系统的并发性能。

5.redis如何提高系统性能？
Redis（Remote Dictionary Server）通过以下几个方面来提高系统性能：

内存存储：Redis将数据存储在内存中，这使得它能够快速读取和写入数据。相比于磁盘存储的数据库系统，Redis能够提供更高的数据访问速度。

单线程模型：Redis采用单线程模型，避免了多线程的锁竞争和上下文切换开销。在高并发场景下，单线程的Redis能够更好地利用CPU的缓存和计算资源，提供更高的响应速度。

非阻塞IO：Redis使用非阻塞IO模型，通过事件驱动的方式处理客户端请求。它利用事件循环机制（Event Loop）和多路复用技术，可以高效地处理大量并发请求，减少线程开销和上下文切换。

内置数据结构和操作：Redis提供了丰富的数据结构（如字符串、哈希、列表、集合、有序集合等）和对应的操作命令。这些内置的数据结构和操作能够在服务端完成，避免了网络传输和客户端计算的开销，提高了数据操作的效率。

缓存机制：Redis可以作为缓存层，将经常访问的数据存储在内存中，并设置过期时间。通过缓存机制，可以避免频繁访问磁盘或数据库，提高数据的访问速度。

发布/订阅和消息队列：Redis提供了发布/订阅（Pub/Sub）和消息队列（Message Queue）功能。这使得它可以处理实时的消息推送和异步任务处理，提高系统的并发性能和可扩展性。

持久化：Redis支持数据持久化，可以将数据保存到磁盘中，以防止数据丢失。它提供了两种持久化方式：RDB（快照）和AOF（追加日志），可以根据需求选择适合的方式进行数据持久化。

集群和分片：Redis提供了集群和分片的功能，可以将数据分布在多个节点上，实现横向扩展和负载均衡。通过分布式部署，Redis可以处理更大规模的数据和更高的并发请求，提高系统的性能和可用性。



RabbitMQ延时队列怎么实现QPS多少， 怎么实现高并发的

水平扩展：通过增加服务器节点来分担并发请求的压力。可以使用负载均衡器将请求分发到不同的服务器上，以提高系统的并发处理能力。
异步处理：将耗时的操作（如IO操作、网络请求等）转为异步进行，减少请求的等待时间，提高系统的并发能力。
缓存：使用缓存技术来存储热点数据，减少对数据库等后端资源的访问，提高系统的响应速度和并发能力。
数据库优化：通过合理的数据库设计、索引优化、查询优化等手段来提高数据库的读写性能，减少数据库的压力。
分布式架构：将系统拆分成多个服务，每个服务独立部署和扩展，通过消息队列等方式进行通信和协调，提高系统的并发处理能力。
限流和熔断：通过限制请求的数量或者对超出阈值的请求进行丢弃或者降级处理，保护系统不被过多的请求压垮。
高效的算法和数据结构：选择合适的算法和数据结构，以提高系统的处理效率和并发能力。
为什么加缓存

后端开发岗位：业务和架构。前者偏广度，知识面要广，深入理解业务需求，选择合适的技术完成业务。后者偏深度，对特定领域、操作系统内核等足够了解，提供通用组件，提供优化等。建议。扩展知识面，不仅限于学校接触的知识，扩展一些技术组件，如消息队列、多种类型数据库等，实际工作非常重要的内容。


Stream流：处理集合更优雅，方便

在接口中新增了默认方法

向接口中添加默认方法，不会破坏接口的实现类，如果在jdk1.7，我们向接口中添加新的功能的时候，我们需要在实现类中重写这个方法

提供默认方法，能够减少实现类中的代码量，这些方法的功能都是相同的，如果某个实现类的功能不同，则重写该方法就行

因为实现类可以实现多个接口，如果多个接口中的都有相同的默认方法，就会出现菱形继承问题，因为该实现类，不知道使用哪个的接口的默认方法

类优先原则：如果一个类继承了另一个类，并且同时实现了一个或多个接口，那么在方法解析时，类的方法优先级高于接口的默认方法。

接口冲突原则：如果一个类实现了多个接口，而这些接口中有相同的默认方法，那么该类必须明确覆盖这个默认方法，提供自己的实现。

解决菱形继承问题就是在继承类中重写默认方法，调用的时候，使用的是继承类的默认方法，而不是接口中的默认方法

函数式接口：接口中只包含一个抽象默认，有没有默认方法都不影响

日期和时间API(Date and Time API)：JDK 1.8引入了一个新的日期和时间API，提供了更全面和灵活的处理日期和时间相关操作的方式。它包括了LocalDate、LocalTime、LocalDateTime和Period等类

原来的Date等类存在的问题：

Date类是可变的，会存在线程安全问题
不一致问题，Date的月份是从0开始，和日常的不一样
Date中的很多Api都是过时的
缺乏时区支持：Date类没有明确的时区支持。这使得在处理跨时区的日期和时间时变得困难，并且容易导致错误。
Nashorn JavaScript引擎：JDK 1.8用一个轻量级高性能的JavaScript引擎Nashorn替代了旧的Rhino JavaScript引擎。它允许你在Java应用程序中嵌入JavaScript代码并无缝执行。

这个可以不用了解

方法引用：是Java 8引入的一种语法简写方式，用于直接引用现有方法或构造函数。它提供了一种更简洁、更可读的方式来表示某个方法作为函数式接口的实现。

方法引用的语法形式为Class::methodName，或者instance::methodName，或者ClassName::new

这个方法引用，也就是我们通过Class::methodName或者其他形式调用之后，返回一个java.util.function包下的对象，具体使用哪个类，看该methodName的返回值和参数决定

public class Student {
    private static String name = "xcye";
    public static String getName() {
        return name;
    }
    public void printName() {
        System.out.println("print: " + name);
    }
    public Student(String name) {
        System.out.println("构造器: " + name);
    }
}

public static void main(String[] args) {
    // String name = Student::getName;
    Student student = new Student("asdf");
    Supplier<String> getNameMethod = Student::getName;
    System.out.println(getNameMethod.get());

    Consumer<Student> consumer = Student::printName;
    consumer.accept(new Student("asdf"));
}
jdk1.7和1.8中的hashmap的区别
只讲到数据结构不同

还有哈希算法不同等

为何hashmap中的扩容是<<1
我回答的是获取元素更快，错误回答

回答这个问题，应该从hash这个点来回答，在对key进行哈希运算的算法为

static final int hash(Object key) {
    int h;
    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);
}
根据hash获取bucket的算法为hash & (length - 1)








问题：MySQL 选的什么引擎，用的什么索引，好处在哪？

可以这样回答引擎选择：我们项目绝大部分场景下使用的是 InnoDB 存储引擎

然后可以稍微解释：

MySQL 常用引擎包括 InnoDB、MyISAM、Memory 等，每一种引擎各有各的优缺点

InnoDB：

优点：支持事务，具有较高的并发性能和数据完整性，支持行级锁和外键约束
缺点：相比于其他引擎，存储空间占用较大
MyISAM：

优点：简单、高效，适用于读密集型应用，占用较小的磁盘空间
缺点：不支持事务和行级锁，对于写密集型应用性能差
Memory：

优点：数据存储在内存，读写速度极快，适用于缓存表和临时表
缺点：数据库重启会丢失数据，不支持事务和持久化
我们项目中需要用到事务、有些写密集型的场景、而且数据需要落到磁盘，

所以我们大部分场景使用的是 InnoDB 这个引擎

接下来，回答索引相关的问题

在项目中，我们会使用主键索引、唯一索引、普通索引、联合索引等

主键索引也是一种唯一索引，它俩都不允许有重复值
与主键索引不同，唯一索引可以包含空值
普通索引也称为非唯一索引，也就是允许重复值
联合索引是对多个列进行索引
索引的好处是可以加速查询，按照索引查询是非常快的，

因为在 InnoDB 中，上面的每个索引都会被组织成 B+ 树

所以说在使用索引的时候，还需要注意在插入和更新大量行的时候

可能会出现性能瓶颈，因为，需要不断的维护索引树


问题：最左端匹配原则

最左匹配原则是指：如果一个索引包含多个列，

则只有在查询条件中包含了索引的最左侧前缀列时，索引才能被利用

例如：假设有一个包含列 A、B 和 C 的索引，查询条件为 WHERE A=1 AND B=2 AND C=3，

那么此时索引可以被充分利用。但如果查询条件为 WHERE B=2 AND C=3，

则此时只能利用索引的 B 和 C 列，而不能利用 A 列。

最左前缀匹配原则的优点是可以最大限度地利用索引，提高查询效率。但也需要注意，如果索引列过多或查询条件不符合最左前缀匹配原则，可能会导致索引无法被利用，从而影响查询性能。

因此，在设计索引时需要根据实际情况选择最适合的索引策略。


问题：Redis 数据结构

Redis 的 key 是字符串类型的，value 有 5 种常用的数据类型

分别是：字符串、列表、集合、有序集合、散列

其中：

字符串有 int、raw、embstr 三种编码实现，int 表示的是整数，其他两种编码方式则是由 SDS 实现
列表：在 Redis 3.2 版本之前，列表对象的编码可以是 ziplist 或者 linkedlist，从 redis 3.2 版本后，列表的底层编码都被设置为 quicklist （linkedlist + ziplist）
集合：集合对象的编码可以是 intset 或者 hashtable
有序集合：有序集合的编码可以是 listpack 或者 skiplist
散列：哈希对象的编码可以是 listpack 或者 hashtable

问题：Redis 三种缓存问题

Redis 的三种缓存问题分别是：缓存穿透、缓存雪崩、缓存击穿

缓存穿透问题：

访问一个缓存和数据库都不存在的 key，此时请求会直接访问到数据库，并且查不到数据，没法写缓存，所以下次请求同样会访问到数据库上
此时，缓存起不到作用，请求每次都会走到数据库，流量大时数据库可能会被打挂。此时缓存就好像被 "穿透" 了一样，起不到任何作用
解决缓存穿透问题的方案：

参数校验
缓存空值
布隆过滤器
缓存雪崩问题：

大量的热点 key 设置了相同的过期时间，导致缓存在同一时刻全部失效，造成瞬时数据库请求量大、压力骤增，引起雪崩，甚至导致数据库被打挂
解决方案：给不同的 key 的 TTL 添加随机值
还有一种情况会导致缓存雪崩，那就是 Redis 挂了，一般情况，大部分请求都是打到 Redis 上，一旦 Redis 挂了，那所有的请求都会打到 MySQL 中了。
解决方案：利用 Redis 集群，提高 Redis 的可用性
缓存击穿问题：

就是一个缓存重建业务较复杂的热点 key 突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击
缓存重建业务较复杂：当在 Redis 中查询不到对应的缓存数据，需要查询数据库，并且要经过复杂的计算得到缓存数据，比如需要关联好几张表，然后计算到一个缓存数据，然后将缓存数据写入到 Redis，这个过程可能需要比较多的时间
当一个热点 key 失效，导致大量的线程打到数据库，好像击穿了 Redis 缓存一样
针对缓存击穿问题，常见的两种解决方案是：

互斥锁，对缓存重建业务加互斥锁，保证只有一个线程执行缓存重建业务，没有获取到互斥锁的线程不断的重试即可，不会打到 MySQL 数据库中
逻辑过期，在 key 对应的 value 中加一个过期时间，当查询缓存的时候，比较这个过期时间，如果过期的话，则去抢互斥锁，抢到锁的线程会创建一个新的线程执行缓存重建业务，并返回过期的 value，没有抢到锁的线程，不要重试，直接返回过期的 value 即可
两种方案的对比：

互斥锁：

优点：没有额外的内存消耗、保证数据一致性、实现简单
缺点：线程需要重试等待，影响性能、可能有死锁的风险
逻辑过期：

优点：线程无需重试等待，性能较好
缺点：不能保证数据一致性、有额外内存消耗、实现稍微复杂

问题：Kafka 怎么保证数据一致性？

Kafka通过多种机制来保证数据一致性：

1. 分区和副本

Kafka 将 Topic 中的数据分为多个分区，每个分区可以有多个副本。

其中一个副本被指定为领导者（leader），其他副本为追随者（follower）。

生产者将消息发送到某个分区的领导者，领导者将消息复制到其他追随者。

如果领导者出现故障，Kafka 会自动选择一个新的领导者来替代它。

这样可以确保即使出现故障，也不会丢失数据。

2. ISR 机制

Kafka 引入了 ISR（In-Sync Replicas）机制，用于确保副本之间的数据一致性。

Kafka 只有在所有副本都接收到消息并确认后，才会向生产者发送确认消息。 

只要某个副本没有及时接收到消息，它就会被移出 ISR 列表，直到它赶上其他副本的进度为止。

这样可以确保副本之间的数据一致性。

3. 事务支持

Kafka 从 0.11 版本开始支持事务，可以将多个消息作为一个事务处理。

这样可以确保多个消息的原子性和一致性，即要么全部提交，要么全部回滚。

这对于一些需要保证数据一致性的场景非常有用，比如银行交易等。

可以看出，Kafka 通过分区和副本、ISR 机制和事务支持等多种机制来保证数据一致性。

这些机制不仅可以防止数据丢失和数据不一致，还可以提高 Kafka 的可靠性和容错性。


问题：项目中如何使用 ElasticSearch？

Elasticsearch 是一款开源的搜索引擎，

它可以用于构建全文搜索、日志分析、业务监控、数据挖掘等应用。

下面是一些在项目中使用 Elasticsearch 的常见方法：

1. 集成 Elasticsearch API

集成 Elasticsearch API 是使用 Elasticsearch 最基本的方法。通过 Elasticsearch 提供的 REST API，我们可以对索引、文档进行增删改查等操作。这种方式可以在任何编程语言中使用，但需要对 Elasticsearch API 有一定的了解和熟悉。

2. 使用 Elasticsearch 客户端库

Elasticsearch 提供了许多客户端库，可以轻松地在 Java、Python、Ruby 等编程语言中使用 Elasticsearch。使用客户端库可以更方便地进行索引、文档操作，同时也可以提供更好的错误处理和调试功能。

3. 使用 Elasticsearch 集成的框架

Elasticsearch 集成了一些流行的开源框架，如 Logstash、Kibana、Beats 等，可以方便地进行日志收集、数据可视化等操作。这些框架提供了丰富的功能，如数据清洗、可视化、告警等，可以帮助我们更好地理解和分析数据。






6、HashMap相关

（1）在jdk1.8之后，HashMap除了数组+链表之外，引用了红黑树。需要说明对于引用了红黑树的 HashMap 如何put一个元素，以及链表是在何时转化为红黑树的。比如，首先需要知道这个元素落在哪一个数组里，获取hashcode后并不是对数组长度取余来确定的，而是高低位异或求与来得到的。这个地方首先得知道异或求与是做什么样的运算的。

（2）之后说一下在HashMap中的实现，比如hashcode无符号右移16位后和原hashcode做异或运算，这相当于把hashcode的高16位拿过来和hashcode的低16位做异或运算，因为无符号右移后前面说的16位都补零，这就是前面说的"高低位异或“，进而是“求与”，和谁求与呢，和数组长度减1 求与。说到这里起码能够证明你是看过源码的，接下来说说你的思考，比如我们知道对于hashmap 初始化容量决定了数组大小，一般我们对于数组这个初始容量的设置是有规律的，它应该是 2^n 。这个初始容量的设置影响了HashMap的效率，那又涉及到影响HashMap效率的主要因素，比如初始容量和负载因子。



11、JVM四种引入类型

这个问题比较简单，强引入、弱引入、软引入、虚引入，说一下它们各自的特点和GC对它们的不同处理方式，再说一下常用的应用场景或者jdk的实现中对它们的使用，比如，ThreadLocal 的静态内部类ThreadLocalMap，它的Key是弱引用的，也可以说一下 在你的理解中 为什么它是弱引用的，假如不是会怎么样。


1、类加载过程

加载、链接、初始化，链接又分为验证准备和解析，每一个阶段是做了什么要说清楚。Object a = new Object()；这行代码做了哪些事情，需要从类加载开始说起，所以一定要清楚每一个环节做了哪些事情的，否则这个问题不可能说清楚。


13.场景题  :单击最大者得处理 100 QPS，压测的场景平均单机 100 克 QPS 超过 100QPS，这样的可能就挂了。但是因为是个集群，比如说有 10 台机器，嗯，对吧？但是我其中有3台或者 5 台机器，因为现在基本都是混部，假如说是混部的情况，就是我可能跟其他的业务的，对吧？它的那个服务是回归在某一个实例上，一个物理机上，因为它的某些任务导致我有一些机器的有问题，我 10 台机器，我有一些，我有几台机器是有影响的，它的服务能力会比较差，它可能就处理不了 100 QPS，它可能就是超过了 50 QPS它就挂了。但是因为我们的负载均衡，对吧？比如都是轮询分发或者随机去负载的，那比如说在这个时候，其实，比如说我每台机器，对吧？ 60 QPS，那我其实那几台机器就挂，可能就挂了。如果我第一个就是如果你是负载均衡的这个设计者，嗯，你应该是怎么避免这种情况？这是第一个问题。第二个问题，如果你是业务服务，因为你们属于业务服务，对吧？如果你是这个业务服务的这个开发者，你怎么去？你应该有哪些方式去保证自己会被打挂。



你服务端你能解释一下负载均衡你是怎么理解的？

Nginx中的负载均衡是指将客户端请求分发到多个服务器上，从而提高系统的可靠性和性能。Nginx通过四种策略实现负载均衡：轮询、IP hash、最少连接数和权重。其中，轮询是默认的策略，根据请求的顺序依次将请求分发给不同的服务器。IP hash则是根据客户端IP地址的hash值来分配请求，最少连接数则会优先将请求分配给连接数最少的服务器，权重则是根据权重值来分配请求。

nginx里面的负载均衡你有了解过里面的实现吗？

Nginx实现负载均衡的原理是在worker进程中维护一个共享的状态，记录所有upstream server的状态信息，然后根据选定的负载均衡算法分配请求到合适的upstream server，最后将响应返回给客户端。Nginx还提供了健康检查、故障切换等机制来保证负载均衡的高可用性。此外，Nginx还支持动态添加和删除upstream server，提供了灵活的配置和管理方式。

cookie、session 、JWT token了解过他们是干什么的吗？

Cookie、Session和JWT Token都是用于Web应用程序中的身份验证和授权机制。

Cookie是在客户端存储的小数据片段，用于跟踪用户的会话状态。

Session是在服务器端存储的用户信息，用于在多个页面间共享用户状态。

JWT Token是一种用于身份验证和授权的安全令牌，包含了用户的信息和数字签名，可以在多个系统间共享。



进程和线程有什么区别？

进程是操作系统中资源分配的基本单位，拥有独立的内存空间和系统资源，进程间通信需要通过IPC机制；

线程是进程中的一个执行单元，共享所属进程的内存空间和系统资源，线程间通信可以直接读写共享内存。

简而言之，进程是资源分配的单位，线程是执行的单位。

刚刚你也提了线程可以共用资源对吧？那进程之间如何做到共用资源呢？进程间的通信方式有哪些？

进程间通信方式包括管道、消息队列、共享内存、信号量、套接字等。其中，管道、消息队列和共享内存属于同一台机器上的进程通信方式，而套接字则可用于网络中不同机器间的进程通信。信号量则可用于同步和互斥。





那四次挥手的服务端不是会有个ack吗？然后再发一个释放连接，那这两次可以合并吗？就是确认报文和释放连接可以同时发送吗？

不可以。因为ACK报文和FIN报文的作用是不同的。ACK报文用于确认客户端发送的FIN报文已经被正确接收，而FIN报文则用于通知客户端服务端已经准备好释放连接。在这两个报文中，ACK报文是必须的，因为客户端需要收到服务端的确认才能确定服务端已经接收到了自己发送的FIN报文。因此，这两个报文不能合并成一个发送。





TCP保证可靠传输的机制包括以下几个方面：

序号和确认号：TCP通过序号和确认号来保证数据的可靠传输。发送方将每个数据报文都标记一个唯一的序号，接收方收到数据后需要回复一个确认号，表示已经成功接收到了这个数据。
超时重传：发送方在发送数据后会设置一个计时器，如果在规定的时间内没有收到确认，则会重新发送数据。这可以保证即使某个数据包在传输过程中丢失，也能够被及时地重传。
滑动窗口：TCP通过滑动窗口机制来控制发送方和接收方的数据发送和接收速率。发送方通过滑动窗口机制来控制发送数据的数量和速度，接收方则通过滑动窗口机制来控制接收数据的数量和速度。
确认机制：TCP通过确认机制来确保数据的可靠传输。发送方将每个数据报文都标记一个唯一的序号，接收方收到数据后需要回复一个确认号，表示已经成功接收到了这个数据。
拥塞控制：TCP通过拥塞控制机制来避免网络拥塞。发送方会根据网络状况和接收方的反馈来调整数据发送的速率，以避免网络拥塞。
有其他方法，其他层上的方式保证它可靠吗？比如说在报文上是不是会有些检验之类的

除了TCP本身提供的可靠传输机制之外，还有其他层上的方式可以保证数据的可靠传输。比如在数据链路层和物理层上，常用的技术包括循环冗余校验（CRC）、帧检验序列（FCS）等，用于检测和纠正数据传输中的错误。

在应用层上，常用的方法包括数据重传、数据校验等。例如，HTTP协议通常会在应用层上进行数据重传，以保证数据的可靠传输。另外，应用层协议也可以使用一些校验算法，如MD5、SHA等，来验证数据的完整性，以保证数据在传输过程中不被篡改。




写个造成死锁的代码
public class DeadLockDemo {
    private static Object resource1 = new Object();//资源 1
    private static Object resource2 = new Object();//资源 2

    public static void main(String[] args) {
        new Thread(() -> {
            synchronized (resource1) {
                System.out.println(Thread.currentThread() + "get resource1");
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println(Thread.currentThread() + "waiting get resource2");
                synchronized (resource2) {
                    System.out.println(Thread.currentThread() + "get resource2");
                }
            }
        }, "线程 1").start();

        new Thread(() -> {
            synchronized (resource2) {
                System.out.println(Thread.currentThread() + "get resource2");
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println(Thread.currentThread() + "waiting get resource1");
                synchronized (resource1) {
                    System.out.println(Thread.currentThread() + "get resource1");
                }
            }
        }, "线程 2").start();
    }
}

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


自我介绍
算法题：一个长度为n的数组找出最大的m个数
讲思路：给定a、b两个文件，各存放50亿个url，每个url各占64字节，内存限制是4G，让你找出a、b文件共同的url
服务器处理并发请求有哪几种方式？（如tomcat，nginx）
了解select，poll，epoll吗
java有一种现代的处理方式，属于异步I/O，是什么
redis，nginx，netty这些超高性能的中间件，是依赖什么做的这么高性能
https是如何防范中间人的攻击
描述一下打开百度首页后发生的网络过程
什么是ddos攻击，怎么防范
进程中通信的方式有哪些
linux中有一个日志文件，日志文件中记录了访问请求的信息，第一列是访问的日期，第二列是请求的ip，第三列是请求的耗时，写一条shell命令来查到请求耗时最高的10条记录
怎么查看哪个端口被哪个进程占用
用shell命令替换一个文件中的字符串
有代码review吗，过程是什么
使用过git吗，在一次commit后，如果想再进行一次commit并且和并之前的commit，一共只产生一条commit，该如何操作
mysql有哪几种存储引擎，它们的区别是什么
mysql的隔离级别分为哪几种类型
慢查询是如何调试解决的
mysql的explain有什么作用
java中有哪些常用的锁，在什么场景下使用
什么是反射，反射在java中有哪些使用场景
开放接口到外网有哪些风险
怎样防止未授权的访问
假如cpu跑到100%，你的解决思路是什么
二面

在项目中承担的工作
现场的传感器是通过一个不可靠的连接将传感器的数据发送到云端，如何可靠地将数据传输到服务器上，保证这个过程不丢失、不重复（保证数据的完整性）
redis作为数据库的前端缓存的时候需要考虑数据的一致性，当需要写入的时候，是先操作数据库还是先操作缓存？
为什么要延迟删除redis中的数据
在java中通过system.currenttimemillis获取时间戳，获取的时间是一个毫秒级的时间，如果我们写的一个程序有一个for循环，循环里面调用system.currenttimemillis和Thread.sleep(1)，可以获取到一秒钟内的所有毫秒吗
程序运行在linux的服务器上，调用Thread.sleep(1)，会发生什么？
程序发送一个网络连接，发送出去会占用一个网络端口，网络端口总数只有65535个，为什么服务端可以同时接受十万到百万个网络连接呢？
A客户端向B服务器的80端口发送连接，最多可以发送多少个网络连接？
为什么服务器端可以同时处理多个并发连接，而发起方没有端口限制呢？
算法题：在一个无重复元素的先递减后递增的数组中找到最小值
讲思路：一个目录里有10亿文件分片，另一个目录里有几万个索引的文件，索引里记录了小分片的路径，一个索引文件里记录了几千到几万的引用，如果一个文件分片被一个索引引用了，就不能删除。考虑路径长度为100字节，那至少需要100G内存才能存下，现在没有那么大内存。现在需要一个方案，筛选出一些可以被安全删除的文件？（如何进行数据清理）

作者：DC桑
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网





自我介绍
实习项目说一下，说了后感觉面试官不感兴趣
自己项目的断点续传怎么实现的
mysql
说一下sql调优经历，我说索引和表关联
MySQL事务特性，acid，之记起来ci，ad代表什么忘了
事务隔离级别，磕磕绊绊地说完了，忘记讲各个级别能解决什么问题了
Java基础
collections有什么实现，我把map当成collections了
list有什么实现，插入海量数据，arraylist和linkedlist哪个快
hashmap不安全为什么线程不安全，说一下场景
hashmap的结构
jvm
垃圾回收算法，我只记得标记清理和标记回收了
说一下cms垃圾回收器，我忘记了，让说一下自己熟悉的，我大概说了下g1
框架
springMVC和springBoot区别，不知道
做题
反转链表2 一次遍历反转第m个到第n个之间的节点，我连反转链表都忘记怎么写了，看了半天一点思路没有，菜死

面试官说最好还是再准备准备，离秋招还有一个月，最近太摆了，一回宿舍啥都不想干，坚持学一小时都做不到

作者：lo0000
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网


 介绍项目；
2. 社区团购项目的架构；
3. 商品模块架构；分类、属性、Sku；
4. 怎么实现用户登录的；
5. CompletableFuture，thenApply 方法，是在主线程还是在子线程执行的；
6. 有没有用到 ThreadLocal，ThreadLocal 父线程如何传递给子线程；
7. RabbitMQ 保证消息顺序消费，重复消息如何处理；
8. mysql 索引，联合索引，如何在 b+树体现的；
9. 你用的什么垃圾回收算法？回答G1，讲一下 G1 垃圾回收算法；


作者：须臾的年风
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网



 HashMap和HashTable的区别（HashMap有并发安全问题的话怎么解决）
2. 介绍一下CurrentHashMap
3. 介绍一下List集合类
4. ArrayList和LinkedList的区别（并发量高的情况下选哪个集合）
5. 数组是否有并发安全问题（如何解决）
6. Synchronized关键字的应用
7. 介绍一下JUC下的锁（如何使用及应用场景）
8. JVM怎么找到垃圾对象（可达性分析算法）
9. GC算法有哪些，区别是什么
10. GC回收器有哪些，区别是什么
11. G1回收器的优点
12. 双亲委派机制的作用
13. OOM出现过吗？如何解决OOM的
14. 线程池参数
15. MySQL的索引有哪些
16. B+树的优点
17. MVCC机制怎么实现的
18.JMM是什么，为什么有它？（补一个，这个应该在第7个问题之后）

作者：小徐不会编程
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网



最后直接来了道设计题：设计一个点赞系统，包括存储、API，提供点赞、取消点赞、查询点赞数、点赞状态、点赞列表等功能。之后还深入：比如高并发下热key怎么处理，如果点赞数只需要显示一个粗略值（比如2k），又该怎么设计

作者：10_+x
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网





一面 7.31（1h）
自我介绍
选一个你简历上的项目讲一下（讲的实习项目，给自己挖坑了）
实习遇到的难点（导致后续都问的MQ）
消息堆积解决方案
消息发送、消费过程
消息一致性 不可重复性（以RabbitMQ角度来阐述的）
如果ack丢了，会有重复消息吗（重试 幂等）
刚才讲的是消费端的处理策略，生产端的处理策略是什么，怎么保障消息能发出去，不丢失？
正常消息队列的消息都是能正常发送的，在极端情况下消息队列的消息才会发不出去，对于消息队列来说有必要消耗一些性能对每一个消息做反查吗？
有用过其他的消息队列吗
讲讲RocketMQ事务消息的发送过程
讲讲Java集合类
往Map存放自定义的类型，有什么需要注意的
HashMap put get过程
为什么HashMap要用红黑树，为什么不用二叉平衡树
HashMap是线程安全的吗，有什么线程安全的实现
ConcurrentHashMap怎么保证线程安全的
已经用了synchronized，为什么还要用CAS呢
扩容是怎么保证线程安全的
如果一个ConcurrentHashMap在被多个线程操作，在进行扩容操作时会有几个线程在处理
（这块看过源码，所有细节全答上来了）
JDK实现锁的方式有哪些（ReentrantLock）
AQS还有什么其他的实现类吗
手撕（40min，一道20min）
2个线程，交替打印100的奇偶数（前面一直在问多线程相关，所以出了这个）
扩展：3个线程，顺序打印1、2、3（说思路即可）
LeetCode hard 剑指 Offer 51. 数组中的逆序对
反问
二面 8.1（1h）
自我介绍
拷打项目（20min）
项目成员，你负责的是什么
Caffeine的实现原理
Guava的LoadingCache和ReloadableCache（没了解过）
项目背景，项目部署在哪里，部署环境是什么
技术选型
建立联合索引字段的顺序
索引失效原因
索引优化方式
手撕（40min，每道20min）
第一题：移除原字符串中最小字符数，使得循环左移1位的字符串与循环右移1位的字符串相等
比如：abcd，左移一位：bcda，右移一位：dabc，删除原字符串中的最小字符数，比较左移右移后的两个字符串是否相等
第二题：01矩阵中反转最小的元素数量，使得原矩阵和顺时针旋转3次的4个矩阵均相等
竞赛题，codeforces原题.. 面试官应该是打ACM的，我太难了

作者：小成同学_
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网



总时间一小时
1、自我介绍
2、项目介绍
3、场景题：将一个数据库中的增量数据迁移到另一个数据库中，怎么保证数据的一致性。
4、为什么mysql有最左原则匹配法
5、有哪些索引设计的基本原则
6、索引怎么进行优化
7、如何看一个sql的执行计划，计划中需要关注哪些信息
8、HashMap解决冲突的方式，红黑树和链表的作用
9、HashMap线程安全吗，原因
10、java的内存层面，如何实现两个线程去改同一个全局变量
11、一个java进程，可以启动多个线程，这些线程之间如何协作
12、jmm内存模型，如何分配和管理内存
13、一道sql题：简单来说就是从一个表中查询另一个表中没出现的数据
14、算法：我找到了原题：https://blog.csdn.net/BEYONDMA/article/details/121584021
最后一题用了栈写，写的有点慢，还没写完面试官说由于时间问题面试先到这，让我回去再研究研究有更好的方法

作者：koalaCC
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网


好未来 1 2面
好未来go/php后端一面 约60min（本人C++）
1、八大设计原则及其相关介绍（对每个设计原则都要求说出一种示例介绍）
2、数据库mysql 索引依次介绍
3、explain各个字段，如何区分是否是覆盖索引
3、数据库隔离级别依次介绍及其原理
4、mysql日志（四种日志及其用法）
5、两千万个数据，数据上限最大是40亿，如何找到两个不重复的（本人回答异或、位运算）
6、接上一个，要求使用最少空间，且数据是一个一个给你的，估算空间最大是多少（考虑bitmap）
7、还问了mysql一个什么文件 具体在哪个路径下（文件名记不太清了）
8、设计三台服务器，要求做自增运算（每台服务器都有读写权限）

作者：yeyeye耶耶耶
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网



网络（http状态码，TCP，UDP协议，TCP超时重传rtt计算方式【比较细】）
网络问的比较细，因为部门主要是做这一块的，我扣的没有太细。
Linux命令，怎么用shell脚本写一个文件行去重，因为好久没用sed和awk写脚本，没写出来。
git 命令。
手撕代码，最长无重复子串，滑动窗口解。
之后和面试官聊了五分钟。

作者：Wreak
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网


快手 Java后端开发工程师 一二三面经
一面 （7.28）
60min = 20 min 八股 + 10 min 项目 + 2道算法

八股（20min）
面向对象三大特性
重载重写
异常结构
Java IO 模型
Mysql存储引擎，InnoDB
B+ Tree
MVCC 实现
索引下推
怎么实现读写分离
redo log 和 binlog 区别
SQL 优化相关
缓存穿透、缓存雪崩怎么解决

项目（10min）
项目因人而异，略

算法（30min）
二叉树最大深度
最长递增子序列

---

二面（7.31）
80min = 20 min 八股 + 20 min 项目 + 2道算法

八股（20min）
Redis Sentinel Cluster
浏览器输入 URL 到展示发生了什么
TCP 三次握手 四次挥手
HTTP GET 和 POST
Spring 事务实现
HashMap 1.7 和 1.8
ThreadLocal 原理，怎么解决内存泄漏
线程池创建及其参数

算法（30min）
手写快排
二叉树中序遍历代码：输出值和第几层

---

三面（8.3）
80min = 30 min 八股 + 20 min 项目 + 1道智力题 + 1道算法

八股（40min）
类加载生命周期
类加载器
类加载机制
双亲委派
G1 收集器优缺点，内部实现
JMM
volatile 特性以及能否实现并发
ThreadLocal 原理，怎么解决内存泄漏
线程池创建及其参数
select * from db where a=1, b>0 如果建立 a 和 b 的联合索引，能不能走索引，时间复杂度
最左前缀法则
MySQL 常见索引
缓存穿透，布隆过滤器实现原理
缓存雪崩，怎么解决
Redis String Zset 实现原理，数据结构，为什么这么设计

智力（10min）
两人玩摸球游戏，总共100球，一人只能模 1-5 球，我怎么摸才能保证我一定拿到第 100 球

算法（20min）
单链表归并排序

作者：houlemon
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网


回答的我都难受死了，总共问了50分钟左右，但其实是因为我全场回答吭吭哧哧的，所以这么长时间。
自我介绍
上来首先问http:知道哪些状态码呀，https怎么建立连接的，tls握手过程，一个go client怎么信任服务端什么的（这个甚至没明白在瞎回答） http1.1和2的比较，2好在哪里(回答的不好)。tcp和udp区别，udp用在哪些地方，为什么这些地方用udp更好。知道泛洪攻击吗？全连接和半连接队列，全连接队列作用(这里瞎回答)。写过建立连接的代码吗(又在瞎说)
介绍一下实习做的什么？说了一些和部门业务的名词我都不知道
redis:了解哪些集群方式，哨兵选举过程，怎么判断从节点网络状况好(又在瞎说)，用过哪些数据结构，项目redis规模(面试官以为用到了集群，实则只是一个几百key的单节点redis服务器)。
mysql怎么排查慢查询，事务隔离级别有哪些？现在一个http接口很慢，怎么去排查。如果是磁盘占用很大有哪些命令查看磁盘，知道查看磁盘io的命令吗？
golang:了解切片底层吗？怎么扩容的，为什么这样扩容？了解接口吗？底层是怎么实现的？（一直准备的是java，这里全g）用过gin和fasthttp，那么它们有什么区别？使用Gin的时候有遇到过什么问题吗？(写接口选手罢了，哪知道这些)。
一道算法题：B树是不是A树的子结构。尴尬的是我代码写出来了，写一个测试用例也过了，面试结束后去力扣做发现是错的

作者：我是fww
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网



自我介绍
介绍一下你项目中印象深刻的功能
我这里讲的是 es 搜索商品
你的高并发购物系统是前后端分离吗
上架商品的逻辑
面试官问商品改价，我这里讲双写模式
String，StringBuilder，StringBuffer
String 的最大长度
==和equals，比较两个String 用==
数组和链表的区别
删除数组中的某个元素，把其他元素往前移动
ArrayList线程安全吗
线程安全的集合类，我讲的是ConcurrentMap和HashTable
HashMap中的 put 操作
负载因子是什么
HashMap初始创建50个容量行吗
用过的异常类
你用 try finally不用catch行吗，我说的是可以
你自己写过反射吗
反射可以调用私有构造函数吗
Spring的类加载机制？我说有点别扭
讲一讲依赖注入
Spring常用的注解
@Autowired是bytype还是byname，@Resource呢（Resource我没答上来）
@Service和@Component的区别
mysql的隔离级别，这里答得有点乱，突然短路了
什么是脏读
讲一下联合索引，我讲了最左匹配
讲了一个表，有学生id，性别，课程号id，哪个适合做索引

作者：我想吃芦苇
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网




自我介绍
介绍一下自己的项目
你的商城系统有哪些高并发场景
如果redis压力过大，你有哪些优化的手段，我这里只说了加集群，加机器。不知道各位大佬有啥好的答案
浏览器键入网址后，发生了什么
SpringMVC怎么匹配到你的url呢，这里的知识我忘记了，瞎说了一些
为什么使用线程池
线程池的类，我讲了ThreadPoolExecutor
数据库的隔离级别
你的项目中数据库的隔离级别是怎么设置的
mysql中哪些语句会加锁
说一下负载均衡，我这里说了很多，说到了按照权重的方式负载
写题：写一个按权重负载均衡的算法

作者：我想吃芦苇
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网



30min
打电话邀面的时候也说的 30min

1. 问实习做了什么，难点在哪 (干杂活修bug哪有难点
2. 你这个项目 2w 多qps，怎么优化能到 100w，瓶颈在哪
3. 为什么不是两次握手，我说第三次是为了确保对方收到了第二次握手，不然双方都不知道连没连上，然后他又问了一遍为什么不是两次握手，然后我把 为什么不是一次握手的结论 答出去了，已经被绕晕了
4. 为什么不是三次挥手
5. 高并发场景用 innodb 还是 myisam


作者：janx111
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网


挑战全网最晚联洲一面：后端开发
之前7.12发过一面邀请有事推了，结果拖到今天，都以为凉了

全程主要问项目+实习，无手撕

1.用过redis吗？

2.自动增长缓冲区怎么实现？

3.测试流程了解吗？

4.服务器性能瓶颈在哪？

5.MySQL底层是什么？索引原理？为什么一条查询语句会很慢？

6.还有什么方式实现高并发？

7.介绍几种STL容器。

8.是否愿意转嵌入式？

作者：许愿offerzxd
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网


自我介绍
讲一下项目
消息幂等是怎么实现的
redis数据丢失怎么处理，我这里讲的持久化机制
项目开发中用过哪些集合类
HashMap实现原理
Spring bean的作用域
你现在能想一个使用多例的场景吗
没答上来，后来查有：数据库连接池，线程池
TCP 三次握手和四次挥手
HTTP 和 HTTPS 的区别，这里答得不好

作者：我想吃芦苇
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网




介绍项目(实习+个人项目)

整体面试感觉很好，并不是生硬的考察八股，而是根据简历上的项目经验进行深挖

大概主要涉及以下八股内容：

1. 线程池参数及原理  （低级八股）

2. MySQL主从复制的原理 （我说了传统方式是binlog+pos 之前自己还了解到过GTID的同步方式，问我有没有异步的方式，说了canal但是感觉不太对，最后反问环节可能我也没问清楚，没问到答案。大概提及了同步、异步、半异步、链式、星式？）

3. MySQL索引为什么用B+ (低级八股)

4. 联合索引场景题，有一个A,B,C的联合索引 select * from xx where A=1 and B=1 orderby C limit 1000能用到几个字段 (这道题能确定的是AB一定用到了，但是C我说不太确定能否用到，后来使用explain尝试了，C是可以用到的，但是中间如果B条件去掉，Extra中就会显示Using filesort了，即排序未使用到索引)

4. 事务的特性ACID（低级八股）

5. 你知道MySQL的WAL原则嘛？有什么好处（这个知道是write ahead logging，先写日志再写数据。好处只答出了保证数据不丢失，这个地方实际上应该是redo log+WAL保证数据不丢失，同时WAL的另一个好处是减少IO次数，将数据的随机空间写入变成了日志的顺序写入，随后再通过异步刷盘进行数据刷入可以提升当时的吞吐量）

6. 那Redis的持久化你了解嘛？（低级八股，但是问了个超纲问题，Redis的AOF遵循WAL原则嘛? 这个我第一时间提出了质疑，WAL是为了解决磁盘写入的，可Redis没有磁盘写入啊，AOF就是Redis 的磁盘写入，AOF既是日志又是数据，这里何谈WAL？。。。我有点懵，有了解的童鞋可以评论教一下，万分感激）

7. 类加载系统 - 没有深入问，可惜了，JVM还是比较有把握的 

8. 中间还问了ConcurrentHashMap的put执行流程 (低级八股)

作者：卷还是被卷这是个问题
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网



HTTp的请求头

http常见的状态码

java垃圾回收机制

java集合遍历的几种方式

为什么用redis分布式锁，而不是考虑用别的锁

mongodb分页查询如何保证查询的过程有新数据后分页查不出重复数据

mq削峰是处理什么业务，具体哪里削峰

mq削峰如何保证不出错，如何保证正确性

redis存的什么，存各种数据的时候用的什么数据结构

redis存点赞数据多的时候，会非常占用空间吧？怎么解决

redis锁和synchonized有什么区别

作者：自由的旅行者
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网


Java八股（约50分钟）
多线程：

1.线程池有哪些参数，平时有用过线程池吗？

2.新线程加入线程池的流程（大于核心线程数？阻塞队列满？大于最大线程数？拒绝策略？）

3.场景题：多个业务并发，如何设计线程池解决问题（CountDownLatch）

JVM：

4.JVM内存分为那几块

5.介绍下栈和堆

6.堆内存分为哪几块

7.GC root和垃圾回收算法

8.CMS和G1和ZGC的工作流程，优缺点

9.平时项目里有没有JVM调优的经验

MySQL：

10.MySql有哪些索引，有什么作用

11.聚簇索引和非聚簇索引

12.什么情况下要回表查询

13.为什么要尽量避免Select *

14.MVCC了解吗，工作原理，为什么MVCC可以实现可重复读

Spring：

15.Spring中Bean的生命周期

16.有看过Spring源码吗

17.Spring之三级缓存解决循环依赖问题

Redis：

18.Redis常见数据结构

19.Redis为什么快

20.Redis的持久化机制

21.Redis的主从同步原理

作者：evolerup
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网




virtual的作用
可以虚构造吗
为什么要虚析构
讲下可重复读隔离级别
怎么解决幻读的
B+树的作用
哈希表和B+树的区别
为什么缓冲池不交给操作系统而是要自己承担
算法题：LRU，后面改成了写LRU时钟算法

二面：
二面的面试官是一个架构师，感觉有点压力面
什么是事物
ACID，A到底指什么，抽象的解释
什么是一致性
MVCC和undo log
什么是两阶段提交
协调者崩了怎么办
CAP理论
CPU缓存
算法：二叉树中序遍历非递归

作者：牛客828636096号
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网




自我介绍

Full GC会在哪些场景发生？

内存泄露的场景哪些呢？

线程有几种创建方法？

线程池的创建方法了解哪些？

如何查找一个几百万数据的表的某一范围区间？

了解哪些设计模式？

单例模式你用在了哪些地方？

单例模式主要有什么作用？

SpringCloud你了解多少？

Spring的二级缓存有什么作用？

Hashmap底层原理？

为什么长度为8就转换为红黑树？

因子为什么默认0.75？底层算法是什么？

Redis的有序集合叫什么？

如果使用Redis实现类似淘宝的历史访问记录？

接口幂等你是如何做的？

你一般拿Redis在项目中都做什么？

给一个部门表有（id，name，parentId），用递归手写部门树返回

二面

作者：冰果不加ice
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网



总共55min，感觉答得还可以，没被问住，但是感觉面试官的反馈不是很强，也没说回答的对不对，最后还说感觉我准备很多面试的问题，也不知道什么意思，是说我八股背的太熟了吗。唉，竞争太大了，拖了两天还是挂了。
1. 自我介绍
2. 深挖实习项目
3. 线程池的配置？
4. 线程池任务的CPU执行时间是a，IO执行时间是b，CPU有N个核心，问如何设置线程数量？
5. （a,b,c,d）a是主键 （b,c）是联合索引，问以下语句是否能用上索引
● select a,b,d from table where c=1 and b=1
● select a,b,d from table where b>1 and c>1
6. Redis缓存击穿、缓存穿透、缓存雪崩？
7. JVM中CMS和G1有什么区别？
8. 设置哪些分配内存参数？
9. 如果创建一个对象比较大会出现什么情况？分配担保机制
10. 上述情况可能会出现频繁地老年代GC，如何解决？
11. 乐观锁和悲观锁有什么区别？
12. 什么时候用乐观锁？多读。什么时候用悲观锁？多写
13. 什么是多读场景什么是多写场景？提到了秒杀系统
14. 如何实现秒杀系统？Redis+Lua
15. 场景题：想要记录用户最近5次登录的时间
● 先写单线程（Map里中存储链表）
● 考虑多线程（ConcurrentHashMap + synchronized锁住用户id）
● 当前并发量很大，单机无法存下这么多数据（使用Redis的zset数据结构）

作者：在刷代码的靓仔
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网



1.实习的内容
2.引申到线程池，讲线程池的原理 执行流程
3.核心线程和非核心线程的区别
4.讲一下你理解的线程安全，我讲到了可见性上去了有点跑题，面试官打断让我讲同步机制
5.乐观锁讲一下
6.为什么你说AQS也用了CAS，你还认为它是悲观锁
7.JVM调优经历，我讲了背景+思路+具体改动+验证方案
8.JVM内存划分
9.Java用过哪些集合类
10.为什么数组就支持O(1)获取元素，链表就不行
11.数据库的隔离级别
12.一道SQL，查出所有成绩均大于60的学生，讲思路
13.算法题，层序遍历，奇数层从左到右，偶数层从右到左

作者：8426
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网



Java
Java基本类型有哪些 占多少字节
int类型范围
HashMap put流程
线程池参数及作用
线程池的工作流程
线程池饱和策略有哪些
线程池回收线程的方法有哪些
ThreadLocal是什么及使用需要注意什么
ThreadLocalMap的底层结构是什么
AQS是什么
AQS如何实现抢占式和非抢占式锁
ContDownLatch是什么
Volatile是什么 如何保证可见性和有序性
sleep和wait方法的区别
为什么sleep方法不需要申请释放锁
GC有哪些垃圾回收器
有哪些GC算法
MySQL
事物的隔离级别及分别用于解决什么问题
在可重复读级别下如何解决脏读问题
什么是索引下推 索引覆盖
如何优化慢查询
Reids
Redis基本数据类型
Sorted Set底层数据结构
跳表是什么 怎么工作 为什么使用跳表
操作系统
什么是进程、线程、协程
进程间如何保持同步
虚拟内存是什么
计算机网络
TCP三次握手、四次挥手过程 Time_Wait字段是干什么的
TCP如何保证可靠连接
TCP、UDP不同点
Coding
字符串整数相加 如“123”+“345”=“468”

作者：Rocked
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网




TCP握手

慢启动机制、拥塞控制

网络重传过程、快速重传谁发起的、如何判断要重传

HTTP如何保证持久连接

为什么1.0不可以

HTTP1和HTTP2的主要区别

——————————————————

有两列date和jilu，统计每天的记录数

如果有一天没有记录，如何让他显示0

——————————————————

请求是异常的如何处理

如何实现负载均衡

一个服务器挂掉，你会怎么操作

如何保证后续请求可以正常访问

为什么使用状态机、有哪些优势

Reactor模式和Proactor模式的区别

为什么选择Proactor模式

实现定时器的时候，为什么选用升序链表

用户密码存在了哪里，有考虑安全性吗

碰到过什么问题，如何解决的


作者：ZzzwyzzZ
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网



TCP握手

慢启动机制、拥塞控制

网络重传过程、快速重传谁发起的、如何判断要重传

HTTP如何保证持久连接

为什么1.0不可以

HTTP1和HTTP2的主要区别

——————————————————

有两列date和jilu，统计每天的记录数

如果有一天没有记录，如何让他显示0

——————————————————

请求是异常的如何处理

如何实现负载均衡

一个服务器挂掉，你会怎么操作

如何保证后续请求可以正常访问

为什么使用状态机、有哪些优势

Reactor模式和Proactor模式的区别

为什么选择Proactor模式

实现定时器的时候，为什么选用升序链表

用户密码存在了哪里，有考虑安全性吗

碰到过什么问题，如何解决的


作者：ZzzwyzzZ
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网



自我介绍
项目提问（10分钟）
Socket通信包括哪些步骤(服务端、客户端分别叙述)
如何通过redis实现分布式锁(具体到Redis命令参数及返回值) SETNX能否设置Expired_TimeSET如何得到返回值
如何通过两个栈实现一个队列(口述，需要流程详细说清)
如何在大量整数中统计出出现次数最多的10个整数 回答使用HashMap加排序（问应该使用哪种排序最好）回答使用堆排序（问堆排序的详细过程）提问使用大根堆还是小根堆好(回答使用大根堆，被提示改为小根堆)时间复杂度是多少
Coding树的中序遍历(先写了三行的递归版本后被要求使用非递归方法)
Java中有什么GC算法 分别介绍一下
Redis中跳表是用在什么地方 索引结构是什么样的 查询的时间复杂度为多少
Select、Epoll多路复用了解吗
MySQL的主从复制机制（答的binlog+两阶段提交 具体细节不清楚）
ArrayList的扩容机制及删除元素后是否会缩容
三次握手、四次挥手过程介绍一下 Time_Wait的作用是什么
面试真题推荐


作者：Rocked
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网




、网卡零拷贝。

2、说一下 TCP 的拥塞控制，知道慢启动吗？

3、项目中的你是如何设计包头的，内容有啥。 然后如果让你设计一个类似tcp/ip的包头，要有哪些字段？

4、TCP 的拆包粘包。 如果不提前知道包长，数据内又有/0这种分割包的特殊字符，应该怎么办？（转译，当时没答出来）

5、解释一下 hashmap 为什么用红黑树代替链表？ 为什么不用avl树？

6、concurrentskiplist是什么结构，如何查询的？如何回退的？

7、项目为什么用 concurrenthashmap？如何保证线程安全的？ hashmap多线程为什么不安全？（答了会链表回环，然后又问具体是怎么成环的，没打出出来。。。。）

8、hashmap扩容时如何进行挪移的？

9、解释一下list

10、concurrenthashmap 的size（）是怎么做的？

11、hashmap、hashtable、concurrenthashmap 比较

12、synchonize关键字。是不是公平锁？为什么是不公平锁？

13、LRU和LFU。

14、mysql事务隔离级别，有什么区别？有什么用？

15、表锁和行锁都是什么时候加？

16、什么是聚簇索引？

17、mybats介绍一下 $和#的区。

18、介绍一下redis ，说一下缓存击穿，穿透，雪崩。然后怎么避免。

19、说一下布隆过滤器，然后如何减少误判。

20、然后无序数组不排序如何查找中位数(类似快排)

作者：校招面试老汤
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网




一面

自我介绍

解释OOP

多态的特点

解释和对比虚函数、纯虚函数

解释STL

对比迭代器和指针

解释HTTP和HTTPS

解释HTTPS中的对称加密和非对称加密

解释TCP的三次握手和四次挥手

为什么不能两次握手

解释线程和进程

解释线程的状态，线程锁，产生死锁的条件和打破死锁的方法

解释快速排序，时空复杂度，是否稳定

在单向链表中检测环，记录环的节点数

列举熟悉的设计模式，解释多线程情况下的单例模式

实现二路归并

二面

自我介绍

解释项目，从项目延申出的技术点开始问问题

解释动态链接和静态链接，各自的优势和使用场景

对比一下Rust和C++（项目有Rust）

解释线程和进程

进程切换的流程

如何衡量进程切换的成本(???不知道什么意思)

你是怎么debug并发程序的

解释读写锁

解释堆内存和栈内存，堆内存管理

解释内存泄漏

解释TCP三次握手，为什么不能两次，能不能四次

解释map和unordered map

解释哈希表如何缓解碰撞带来的性能下降

判断字符串去掉至多一个字符，是不是回文字符串

三面

谈论项目，延申出技术问题

对比C++和python，Python为什么比其它脚本语言慢(?)

C++编译的流程，编译的阶段，中间代码优化的方法

解释risc和cisc

递进式开放性技术问题：

结合对OS的理解，描述复制和粘贴的一种实现，怎么实现不同应用间数据的交换，共享内存的风险，解决数据竞争的方法，复制文件的策略，提示考虑Copy on write......

你最常用的手机App(B站），从技术角度看视频卡顿产生的原因，问了一大堆忘了

作者：乖巧小老弟
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网



、介绍自己
2、进程和线程的区别
3、实习项目用到哪些中间件
4、java的agent有了解吗
5、类加载机制
6、如何查看一个线程执行时间
7、内存泄漏怎么排查
8、linux有用过吗，讲一下一些简单的命令
9、死锁的原因，出现死锁如何解决
10、三次握手
11、了解AOP的原理吗
12、数据库中字段设计有哪些需要注意的
13、可以接受基础架构方向吗
其他的记不清了，反正都蛮简单的，没问算法，一共三十分钟，全是八股。毕竟和自己的实习方向不同，没怎么问业务上的知识，主要就是基础方面。

作者：ibm_5100
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网




项目相关:
1.单点登录
2.redis的set集合相关，元素过多怎么办
3.redis内存不够怎么办
4.kafka结构，消息时间顺序
5.rpc的作用，和http对比
6.netty特点
7.netty的io模型和线程模型，eventloop
8.netty连接断开怎么办

其他:
1.spring相关
2.三级缓存
3.mysql事务隔离级别
4.在哪个级别解决幻读，怎么解决的，彻底解决了吗
5.mysql有哪些日志，分别起什么作用
6.undolog怎么工作的

作者：牛客541840115号
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网




. 对IO多路复用的理解

2. epoll相比select和poll性能高的地方

3. epoll怎么知道文件描述符上发生了事件

   感觉是想问ET模式和LT模式，当时没反应过来面试官想问什么

4. 为什么用线程池不用进程池（多线程是否能完全取代多进程）

   我心想线程池真的不能完全代替进程池吗，进程的切换效率很低啊，不过一个线程挂了整个进程就会挂，谷歌好像用的进程？？

5. 浏览器怎么知道服务器返回的是图片还是js或者css

6. 为什么要实现自动增长的缓冲区，vector不就可以吗

7. 不用单例模式写日志会有什么问题？多进程下呢？

   不知道不知道···

8. 动态链接库和静态链接库分别有什么优缺点

   忘了

9. 内存为什么设计栈和堆，不能都在堆上分配吗

   乱扯一些内存碎片啥的

10. 怎么优化内存使用率，减少内存碎片

    不知道不知道···

11. 浏览器访问服务器会经过哪些协议？

12. 怎么做到多服务器的负载均衡

    当时没看过负载均衡，随便蒙了个nat

作者：woodie_
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网




1. 自我介绍

2. 智能BI的分表实现

3. Java单继承还是多继承

4. 所有对象最终的父类（Object)，以及它含有的一些方法，及作用

5. 你熟悉的集合类，以及你了解的原理，越详细越好

6. 三个异常种类

7. 平时怎么处理异常

8. MySQL Group by 

9. 常见的排序算法，以及各自的性能。

10. 你觉得哪种排序最快

作者：又熬夜了的高级磨洋工很热血
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网



1.自我介绍

2.项目都是哪来的

3.讲讲项目流程

4.平时怎么学习的

5.讲讲怎么设计一个api，用到什么注解

6.怎么声明一个bean，注解分别用在什么地方

7.多线程是怎么实现的

8.线程池的核心参数是什么，分别代表什么含义

9.如果超过了最大线程数会怎么样

10.讲讲常用的集合

11.arraylist与linklist的区别

12.会不会前端

13.反问

作者：小陈要找到工作
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网



.自我介绍

2.讲讲Java的优势，好处

3.讲讲内存泄露

4.垃圾回收算法

5.数据库的索引

6.线程与进程的关系

7.如何保证线程安全

8.单例模式的实现方式

9.饿汉式是如何保证线程安全的

10.synchronized互斥锁是怎么保证线程安全的

11.tcp和udp的区别

12.类加载器加载的先后顺序，如果一个父类的方法不想被子类继承

怎么办，final还有其他用处吗

13.面向对象的三大特性，展开叙述。

14.算法实现：两数之和，扩展，输出对应的下标。


作者：小陈要找到工作
链接：https://www.nowcoder.com/interview/center?entranceType=%E5%AF%BC%E8%88%AA%E6%A0%8F
来源：牛客网
















代码规范
/**
 * 文档结构
 * 按照 版权，package,import, 顶层类顺序，且空行隔开
 * import按 静态导入，第三方包，java类顺序，空行隔开
 * 类文件 按照类变量，实例变量，构造器，方法的顺序排版
 * public变量，protected变量，default变量，private变量顺序
 * 一个文件不要超过2000行，方法不超过60行，参数不超过5个
 * 每行限长120窄字符，每行最多一个语句
 *避免嵌套过深，不要超过4层(函数本身算一层，try-catch不算一层)--过多嵌套推荐使用卫语句，或者Stream流来减少嵌套和复杂度
 */

/**
 * 命名
 * 标识符由数字，字母，下划线组成，不超过64个字符，要见闻知意
 * 接口，类，注解，枚举类型：大驼峰(测试类加Test后缀)
 * 类的字段，局部变量，方法，方法参数：小驼峰(测试方法可以由下划线)
 * 静态常量，枚举值：全大写，下划线分割
 * 泛型类型：单个大写字母，可拼接一个数字：T,T2
 * 包名：全小写
 */

/**
 * 其他规范
 * 使用类名.调用静态方法，而不是使用实例.来调用
 * 谨慎使用可变数量参数的方法
 * 对于返回数组/容器的方法，应返回长度为0的数组或容器来替代返回null
 * 不要使用已经废弃的方法(应该用JDK推荐方法)
 * 重写equals方法时，必须同时重写hashcode方法
 * 方法的设计优先考虑泛型，更加方便，更加容易
 * 每次缩进为4个空格，不要用tab键
 *
 * '('前要有空格， -> , :, ::, {}, 运算符前后要有空格
 * 换行在'.' , '::' , '&'之前
 * 换行在左'(' , ',' , '-> {' 之后
 * 每行只声明一个变量
 * 数组声明使用 String[] args, 禁止使用String args[](C语言风格)
 * 代码种不要用断言
 * 修饰符显示顺序：public protected private abstract default static final transient volatile synchronized native strictfp
 *
 * 接口中已有缺省修饰符，去掉多余修饰符
 *  变量：public static final
 *  方法：public abstract
 *
 *  无用的代码不要留 空的if,空的try{},无效的import
 *  不要创建临时变量作为return的返回值，要保持代码整洁(正例，return xxxDao.findAll())
 *  禁止使用finalize()方法：调用时机是不可预测的，常常也是危险的，
 *  禁止主动GC
 *  不要对正则表达式进行频繁GC
 */


